;-------------------------------- PrivateDial ----------------------------------
; Filename: extensions.conf
; This file is an Asterisk configuration file, part of the PrivateDial suite
; It is loaded by the pbx_config.so module.
;

;-------------------------------- general --------------------------------------
; This category loads include files.
;
[general]
#tryinclude extensions_local.conf

;-------------------------------- globals --------------------------------------
; Global options are defined in include files.
;
[globals](+)
;-------------------------------- sms
; Full path to SMS app
APP_SMS = /usr/local/bin/websms

;-------------------------------- entry contexts -------------------------------
; Calls enter the dialplan in one of these entries
; Local additions to these entries are defined in include files.
;
[dp_entry_call_inout](+)
include => dp_lookup
include => dp_ivr_recgreet
include => dp_call_inout

[dp_entry_call_in](+)
include => dp_lookup
include => dp_call_in

[dp_entry_text_inout](+)
include => dp_lookup
include => dp_text_inout

[dp_entry_text_in](+)
include => dp_lookup
include => dp_text_in

[dp_entry_answer](+)
include => dp_lookup
include => dp_answer


;-------------------------------- action contexts ------------------------------

;-------------------------------- dp_lookup
; hints are placed here see hint_exten in pjsip_wizard.conf
;
; Rewrite E.123
; More than 6 characters and first is 0; assume national number so add + and country code
; More than 6 characters and first is 1-9, assume international number so add +
;
[dp_lookup]
exten => _0ZXXXXXX.,1,Goto(${CONTEXT},+${GLOBAL(CONTRY_CODE)}${EXTEN:1},1)
exten => _ZXXXXXX.,1,Goto(${CONTEXT},+${EXTEN},1)

[dp_call_inout]
exten => _[+0-9].,1,NoOp()
 same => n,Gosub(sub_dial_term,s,1(${HINT}))
 same => n,Gosub(sub_voicemail,s,1(${HINT}))
 same => n,Gosub(sub_dial_trunk,${EXTEN},1(${HINT}))
 same => n,Hangup()

[dp_call_in]
exten => _[+0-9].,1,NoOp()
 same => n,Gosub(sub_dial_term,s,1(${HINT}))
 same => n,Gosub(sub_voicemail,s,1(${HINT}))
 same => n,Hangup()

[dp_text_inout]
exten => _[+0-9].,1,NoOp()
 same => n,Gosub(sub_rewrite_from,s,1)
 same => n,Gosub(sub_text_term,s,1(${HINT}))
 same => n,Gosub(sub_text_trunk,${EXTEN},1(${HINT}))
 same => n,Hangup()

[dp_text_in]
exten => _[+0-9].,1,NoOp()
 same => n,Gosub(sub_decode_body,s,1)
 same => n,Gosub(sub_text_term,s,1(${HINT}))
 same => n,Hangup()

[dp_answer]
;DEVICE_STATE = UNKNOWN | NOT_INUSE | INUSE | BUSY | INVALID | UNAVAILABLE | RINGING | RINGINUSE | ONHOLD
exten => _[+0-9].,1,Goto(dev-${DEVICE_STATE(${HINT})})
 same => n(dev-NOT_INUSE),NoOp()
 same => n(dev-INUSE),NoOp()
 same => n(dev-RINGING),NoOp()
 same => n(dev-RINGINUSE),NoOp()
 same => n(dev-ONHOLD),NoOp()
 same => n(dev-UNAVAILABLE),NoOp()
 same => n,Answer()
 same => n(dev-UNKNOWN),NoOp()
 same => n(dev-INVALID),NoOp()
 same => n,Hangup()

[dp_hangup]
exten => _[+0-9].,1,Hangup()

;-------------------------------- dp_ivr_recgreet
; Record personal voicemail greeting messages interactive voice response
;
[dp_ivr_recgreet]
exten => _X,1,Verbose(3, "New caller, ${CALLERID(num)} dialed into the IVR.")
 same => n,Set(endpoint=${CHANNEL(endpoint)})
 same => n,Set(mailboxes=${PJSIP_ENDPOINT(${endpoint},mailboxes)})
 same => n,Gotoif(${ISNULL(${endpoint})}?hangup:)
 same => n,Answer()
 same => n,Set(mailpath=${MINIVMACCOUNT(${mailboxes}:path)})
 same => n,Verbose(3, "Mailbox: ${mailboxes}, Creating new path: ${mailpath}")
 same => n,System(mkdir -p ${mailpath})
 same => n,Goto(exten-${EXTEN})

 same => n(exten-1),Verbose(3, "Caller ${endpoint} Record the temporary greeting.")
 same => n,MinivmAccMess(${mailboxes},t)
 same => n,Goto(exten-9)

 same => n(exten-2),Verbose(3, "Caller ${endpoint} Record the unavailable greeting.")
 same => n,MinivmAccMess(${mailboxes},u)
 same => n,Goto(exten-9)

 same => n(exten-3),Verbose(3, "Caller ${endpoint} Record the busy greeting.")
 same => n,MinivmAccMess(${mailboxes},b)
 same => n,Goto(exten-9)

 same => n(exten-4),Verbose(3, "Caller ${endpoint)} Record the account name.")
 same => n,MinivmAccMess(${mailboxes},n)
 same => n,Goto(exten-9)

 same => n(exten-5),Verbose(3, "MusicOnHold")
 same => n,MusicOnHold()
 same => n,Goto(exten-9)

 same => n(exten-6),Verbose(3, "Echo")
 same => n,Playback(demo-echotest)
 same => n,Echo()
 same => n,Playback(demo-echodone)
 same => n,Playback(vm-goodbye)
 same => n,Goto(exten-9)

 same => n(exten-9),Background(basic-pbx-ivr-main)
 same => n,WaitExten(10)
 same => n,Background(basic-pbx-ivr-main)
 same => n(hangup),Hangup()

exten => i,1,Playback(option-is-invalid)
 same => n,Goto(9,exten-9)

exten => t,1,Playback(are-you-still-there)
 same => n,Goto(9,exten-9)

;-------------------------------- subroutines ----------------------------------
; Syntax: Gosub(context,extension,priority(${ARG1},${ARG3},${ARG4}))
;

;-------------------------------- sub_dial_term
; Dial user subroutine for PJSIP
; Dial all pjsip contacts of an endpoint
; Usage: Gosub(sub_dial_term,s,1(${HINT}))
; ${ARG1} - pjsip tech/endpoint: ${HINT}, eg PJSIP/myuser
;
; Implementation details
; Dial all registered contacts of the endpoint. Return if there are none.
; Do not hangup, so that we can pass the call to sub_voicemail
;
[sub_dial_term]
exten => s,1,Set(LOCAL(endpoint)=${ARG1:6}) ; strip PJSIP/ from endpoint name
 same => n,Gotoif(${ISNULL(${endpoint})}?return:)
 same => n,Set(LOCAL(contacts)=${PJSIP_DIAL_CONTACTS(${endpoint})})
 same => n,Gotoif(${ISNULL(${contacts})}?return:)
 same => n,Verbose(2, "Call from CID: ${CALLERID(all)}, dialing all contacts of endpoint: ${endpoint}.")
 same => n,Dial(${contacts}${GLOBAL(DIAL_TIMEOUT)})
 same => n(return),Return()

;-------------------------------- sub_dial_trunk
; Dial trunk subroutine for PJSIP
; Usage: Gosub(sub_dial_trunk,${EXTEN},1(${HINT}))
; ${EXTEN} - Extension, eg 0046735698294
; ${ARG1} - pjsip tech/endpoint: ${HINT}, eg PJSIP/myuser
;
; Implementation details
; Dial EXTEN using ${TRUNK_ENDPOINT} which is defined in endpoint using set_var.
; In keeping with coding style, do not hangup.
; The channel variable ${TRUNK_ENDPOINT} holds the SIP trunk endpoint and
; needs be set on endpoints. This allows mutiple SIP trunk endpoints to be used.
;
[sub_dial_trunk]
exten => _[+0-9].,1,NoOP(Dialing out originating CID ${CALLERID(all)})
 same => n,Dial(PJSIP/${EXTEN}@${TRUNK_ENDPOINT})
 same => n(return),Return()

;-------------------------------- sub_voicemail
; Voicemail subroutine:
; Usage: Gosub(sub_voicemail,s,1(${HINT}))
; ${ARG1} - pjsip tech/endpoint: ${HINT}, eg PJSIP/myuser
; ${ARG2} - Status of the call: ${DIALSTATUS}, one of: 
;   CHANUNAVAIL, CONGESTION, BUSY, NOANSWER, ANSWER, CANCEL, DONTCALL, TORTURE
;
; Implementation details
; Depending on DIALSTATUS direct caller to voice mail and then hangup.
; Only return from here if callee has no endpoint, in which case we assume
; callee is external.
; MiniVM does not work unless there is a mailbox directory, so always create it.
;
[sub_voicemail]
exten => s,1,Set(LOCAL(endpoint)=${ARG1:6}) ; strip PJSIP/ from endpoint name
 same => n,Gotoif(${ISNULL(${endpoint})}?return:)
 same => n,Set(LOCAL(mailboxes)=${PJSIP_ENDPOINT(${endpoint},mailboxes)})
 same => n,Gotoif(${ISNULL(${mailboxes})}?mailbox-NULL:)
 same => n,Set(mailpath=${MINIVMACCOUNT(${mailboxes}:path)})
 same => n,System(mkdir -p ${mailpath})
 same => n,Goto(dial-${DIALSTATUS})
 same => n(return),Return()

 same => n(mailbox-NULL),NoOp()
 same => n,Playback(please-try-call-later)
 same => n,Hangup()

 same => n(dial-CHANUNAVAIL),NoOp()
 same => n(dial-CONGESTION),NoOp()
 same => n(dial-NOANSWER),NoOp()
 same => n(dial-),NoOp()
; same => n,MinivmGreet(${mailboxes},u)
 same => n,Goto(mail-RECORD)

 same => n(dial-BUSY),NoOp()
; same => n,MinivmGreet(${mailboxes},b)

 same => n(mail-RECORD),NoOp()
 same => n,MinivmGreet(${mailboxes},s)
 same => n,MinivmRecord(${mailboxes}${GLOBAL(VOICEMAIL_RECGAINDB)})
 ; If the caller hangs up after the recording, 
 ; the only way to send the email and clean up is to execute in the "h"
 same => n,Hangup()

 same => n(dial-CANCEL),NoOp()
 same => n(dial-DONTCALL),NoOp()
 same => n(dial-TORTURE),NoOp()
 same => n(dial-ANSWER),NoOp()
 same => n,Hangup()

; send email and clean up
exten => h,1,Goto(recd-${MVM_RECORD_STATUS})

 same => n(recd-SUCCESS),NoOp()
 same => n(recd-USEREXIT),NoOp()
 same => n,MinivmNotify(${mailboxes}${GLOBAL(VOICEMAIL_TEMPLATE)})
 same => n,Goto(mail-${MVM_NOTIFY_STATUS})

 same => n(mail-SUCCESS),NoOp()
 same => n,MinivmDelete()
 same => n,Goto(recd-)

 same => n(mail-FAILED),NoOp()
 same => n(recd-FAILED),NoOp()
 same => n,Playback(vm-incorrect-mailbox)

 same => n(recd-),NoOp()
 same => n,Hangup()

;-------------------------------- sub_rewrite_from
; Rewrite the MESSAGE(from) subroutine for PJSIP
; Usage: Gosub(sub_rewrite_from,s,1)
;
; Implementation details
; Some clients sets the MESSAGE(from) to endpoint@domain
; But we want the MESSAGE(from) to be set to the endpoint extension, ie, its hint
; so assume the MESSAGE(from) is of the form endpoint@domain and
; try to look up the endpoint's hint.
; if successful rewrite the MESSAGE(from)
;
[sub_rewrite_from]
exten => s,1,Verbose(3,"Original message from ${MESSAGE(from)}")
 same => n,Set(LOCAL(endpoint)=${CUT(MESSAGE(from),@,1)})
 same => n,Set(LOCAL(endpoint)=${CUT(endpoint,:,2)})
 same => n,Gotoif(${ISNULL(${endpoint})}?return:)
 same => n,Set(LOCAL(from)=${PJSIP_ENDPOINT(${endpoint},@hint_exten)})
 same => n,Gotoif(${ISNULL(${from})}?return:)
 same => n,Set(MESSAGE(from)=${from})
 same => n,Set(WEBSMS_INDEX=${PJSIP_ENDPOINT(${endpoint},WEBSMS_INDEX)})
 same => n,Verbose(3,"Updated message from ${MESSAGE(from)}, WEBSMS_INDEX: ${WEBSMS_INDEX}")
 same => n(return),Return()

;-------------------------------- sub_decode_body
; URL decode the MESSAGE(body) subroutine
; Usage: Gosub(sub_decode_body,s,1)
;
; Implementation details
; If MESSAGE_ENCODE = rfc3986 then the MESSAGE(body) is URL encoded
; (using RFC3986 which supersedes RFC2396) in the callfile, so decode it here.
;
[sub_decode_body]
exten => s,1,Gotoif(${ISNULL(${MESSAGE_ENCODE})}?return:)
 same => n,GotoIf($[ ${MESSAGE_ENCODE} != rfc3986 ]?return:)
 same => n,Verbose(3,"Original message body ${MESSAGE(body)}")
 same => n,Set(MESSAGE(body)=${URIDECODE(${MESSAGE(body)})})
 same => n,Verbose(3,"Updated message body ${MESSAGE(body)}")
 same => n(return),Return()

;-------------------------------- sub_text_term
; Instant messaging subroutine for PJSIP
; Send message to all pjsip contacts of an endpoint
; Usage: Gosub(sub_text_term,s,1(${HINT}))
; ${EXTEN} - Extension, eg 0735698294
; ${ARG1} - pjsip tech/endpoint: ${HINT}, eg PJSIP/myuser
;
; Implementation details
; PJSIP_DIAL_CONTACTS() return all contact URLs separated by an "&", eg: 
; PJSIP/myuser/sip:myuser@10.10.10.100:61863;option=value&PJSIP/myuser/sip:myuser@217.103.237.202:35678;option=value
; Within a While() loop, we cut this string at the "&" using ${SHIFT(contacts,&):6}. 
; The ":6" strips off the initial "PJSIP/".
; MessageSend() needs the URL to be slightly reformatted, eg
; pjsip:myuser/sip:myuser@10.10.10.100:61863;option=value
; so we simply prepend with "pjsip:"
; MessageSend() accepts but ignores any provided options
;
[sub_text_term]
exten => s,1,Verbose(2, "Text User, To: ${MESSAGE(to)}, Hint: ${ARG1}, From: ${MESSAGE(from)}, CID: ${CALLERID(all)}, Body: ${MESSAGE(body)}")
 same => n,Set(LOCAL(endpoint)=${CUT(ARG1,/,2)})
 same => n,Gotoif(${ISNULL(${endpoint})}?return:)
 same => n,Set(LOCAL(contacts)=${PJSIP_DIAL_CONTACTS(${endpoint})})
 same => n,While($["${SET(contact=${SHIFT(contacts,&):6})}" != ""])
 same => n,MessageSend(pjsip:${contact},${MESSAGE(from)})
 same => n,Verbose(2, "Send status is ${MESSAGE_SEND_STATUS}")
 same => n,EndWhile
 same => n(return),Return()
 
;-------------------------------- sub_text_trunk
; Instant messaging subroutine for PJSIP
; Send message to trunk via curl
; Usage: Gosub(sub_text_trunk,${EXTEN},1(${HINT}))
; ${EXTEN} - Extension, eg 0735698294
; ${ARG1} - pjsip tech/endpoint: ${HINT}, eg PJSIP/myuser
;
; Implementation details
; To distinguish between local and external numbers we use the HINT
; If the HINT is null we assume that it is an external number
; AGISTATUS is one of SUCCESS, FAILURE, NOTFOUND, HANGUP
; The channel variable ${WEBSMS_INDEX} can be set on endpoints to select which
; configuration to use.
;
[sub_text_trunk]
exten => _[+0-9].,1,Verbose(2, "Text Out, To: ${MESSAGE(to)}, Hint: ${ARG1}, From: ${MESSAGE(from)}, CID: ${CALLERID(all)}, Body: ${MESSAGE(body)}, using Index: ${WEBSMS_INDEX}")
 same => n,Set(LOCAL(endpoint)=${CUT(ARG1,/,2)})
 same => n,Gotoif(${ISNULL(${endpoint})}?:return)
 same => n,AGI(${GLOBAL(APP_SMS)},${EXTEN},${MESSAGE(from)},${QUOTE(${MESSAGE(body)})},${WEBSMS_INDEX})
 same => n,Verbose(2, "AGI status is ${AGISTATUS}")
 same => n(return),Return()
